name: Node Application

on:
  workflow_call:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        type: string

      server_ip:
        description: 'Public IP address of the deployment server'
        required: true
        type: string

      server_user:
        description: 'SSH user for the remote server (e.g., ubuntu)'
        required: true
        type: string

      ssh_key_filename:
        description: 'SSH key filename (without path)'
        required: false
        type: string
        default: 'id_ed25519'

      app:
        description: 'Absolute path to the app directory on the server'
        required: true
        type: string

      process_name:
        description: 'PM2 process name used to identify/restart the app'
        required: true
        type: string

      script:
        description: 'Optional post-deployment shell commands'
        required: false
        type: string
        default: ''

      start_command:
        description: 'Yarn start command (e.g., start:prod, start:staging)'
        required: false
        type: string
        default: 'start'

      require_env:
        description: 'Require .env file to be present before building'
        required: false
        type: boolean
        default: true

    secrets:
      ssh_key:
        description: 'Private SSH key with access to the server'
        required: true

jobs:
  deploy:
    name: Deploy Node.js App
    runs-on: ubuntu-latest

    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v3

      - name: 🔐 Set up SSH
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "$SSH_KEY" > ~/.ssh/${{ inputs.ssh_key_filename }}
          chmod 600 ~/.ssh/${{ inputs.ssh_key_filename }}
          ssh-keyscan -H ${{ inputs.server_ip }} >> ~/.ssh/known_hosts
        env:
          SSH_KEY: ${{ secrets.ssh_key }}

      - name: 🚀 Deploy to Server
        run: |
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/${{ inputs.ssh_key_filename }} -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"

            ssh -i ~/.ssh/${{ inputs.ssh_key_filename }} \
              -o IdentitiesOnly=yes -o StrictHostKeyChecking=no \
              ${{ inputs.server_user }}@${{ inputs.server_ip }} << 'EOF'
              set -e
            
              echo "📂 Checking for app directory..."
              if [ ! -d "${{ inputs.app }}" ]; then
                echo "📥 Cloning app since it doesn't exist..."
                git clone --branch ${{ inputs.branch }} git@github.com:${{ github.repository }} "${{ inputs.app }}"
                exit 0
              fi
  
              cd ${{ inputs.app }}
  
              echo "🔍 Checking if directory is a git repo..."
              if [ ! -d ".git" ]; then
                echo "⚠️ No .git found. Initializing and adding origin..."
                git init
                git remote add origin git@github.com:${{ github.repository }}
                git fetch origin
                git checkout ${{ inputs.branch }}
              fi
  
              echo "🔍 Checking if .env is required and present..."
              if [ "${{ inputs.require_env }}" = "true" ] && [ ! -f ".env" ]; then
                echo "❌ .env file is required but not found!"
                exit 1
              fi
  
              if git rev-parse --verify HEAD > /dev/null 2>&1; then
                echo "🧹 Cleaning uncommitted changes, keeping .env..."
                git reset --hard HEAD
                git clean -fd -e .env
              else
                echo "⚠️ HEAD not found — skipping cleanup"
              fi

  
              echo "⬇️ Pulling latest from branch: ${{ inputs.branch }}"
              git pull origin ${{ inputs.branch }}
  
              echo "📦 Installing dependencies..."
              yarn install
  
              echo "🔨 Building app..."
              yarn build
  
              echo "🚀 Running deploy script if provided..."
              if [ ! -z "${{ inputs.script }}" ]; then
                eval "${{ inputs.script }}"
              fi
  
              echo "🔁 Restarting or starting app with PM2..."
              pm2 describe "${{ inputs.process_name }}" > /dev/null
              if [ $? != 0 ]; then
                echo "Starting ${{ inputs.process_name }} with yarn ${{ inputs.start_command }}..."
                pm2 start yarn --name="${{ inputs.process_name }}" -- ${{ inputs.start_command }}
              else
                echo "Restarting ${{ inputs.process_name }}..."
                pm2 restart "${{ inputs.process_name }}"
              fi
            EOF
